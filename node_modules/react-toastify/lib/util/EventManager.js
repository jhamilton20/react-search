"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var eventManager = {
  eventList: new Map(),

  /**
   * Bind event
   *
   * @param event
   * @param callback
   * @param context
   * @returns {eventManager.on}
   */
  on: function on(event, callback) {
    var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    this.eventList.has(event) || this.eventList.set(event, []);

    this.eventList.get(event).push({
      callback: callback,
      context: context || this
    });

    return this;
  },


  /**
   * Unbind events
   * Strict comparison voluntary omitted to check both null and undefined
   *
   * @param event
   * @param callback
   * @returns {boolean}
   */
  off: function off() {
    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (event != null && callback == null) {
      return this.eventList.delete(event);
    } else if (event != null && callback != null) {
      var listeners = this.eventList.get(event);

      this.eventList.set(event, listeners.filter(function (el) {
        return !(el.callback === callback || el.callback.toString() === callback.toString());
      }));
      listeners.length > 0 || this.eventList.delete(event);

      return true;
    } else if (event === null && callback === null) {
      this.eventList.clear();
      return true;
    }
    return false;
  },

  /**
   * @param event
   * @param callback
   * @param context
   * @returns {eventManager.once}
   */
  once: function once(event, callback, context) {
    this.on(event, callback, context);
    var listener = this.eventList.get(event);
    var idx = listener.length - 1;
    listener[idx].once = true;
    return this;
  },

  /**
   * @param event
   * @param args
   * @returns {boolean}
   */
  emit: function emit(event) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (!this.eventList.has(event)) {
      /* eslint no-console: 0 */
      console.warn("<" + event + "> Event is not registered. Did you forgot to bind the event ?");
      return false;
    }
    var listeners = this.eventList.get(event);

    this.eventList.set(event, listeners.filter(function (listener) {
      var _listener$callback;

      (_listener$callback = listener.callback).call.apply(_listener$callback, [listener.context].concat(_toConsumableArray(args)));
      return !listener.once;
    }));

    return true;
  }
};

exports.default = eventManager;